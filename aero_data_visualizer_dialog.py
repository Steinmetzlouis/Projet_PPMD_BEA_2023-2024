# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AeroDataVisualizerDialog
                                 A QGIS plugin
 This plugin allows to visualize aeronautical data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-01-08
        git sha              : $Format:%H$
        copyright            : (C) 2024 by BEA
        email                : louise.redlinger@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject, QgsWkbTypes, QgsGeometry

# Librairie saisie d'emprise (TRI A FAIRE!)
from qgis.core import QgsRectangle
from qgis.core import QgsPointXY
from qgis.PyQt.QtWidgets import QApplication, QMessageBox
from qgis.gui import QgsMapTool, QgsMapToolExtent, QgsRubberBand, QgsMapCanvas

from PyQt5.QtCore import Qt
import json
from qgis.core import QgsVectorLayer, QgsDataSourceUri, QgsProject, QgsWkbTypes

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'aero_data_visualizer_dialog_base.ui'))





class AeroDataVisualizerDialog(QtWidgets.QDialog, FORM_CLASS):
    
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(AeroDataVisualizerDialog, self).__init__(parent)
        self.iface = iface
        self.setupUi(self)
        self.setWindowFlags(Qt.Window)

        print("Bienvenue dans le bien nommé plugin AeroDataVisualizer ! ")

        self.rubberband = None
        self.mapTool = None
        self.extent = None
        self.extent_wgs84 = None
        self.date_value = None

        # Pour trouver le QTabWidget 
        tab_widget = self.findChild(QtWidgets.QTabWidget, 'tabWidget')

        if tab_widget:
            
            print("TabWidget trouvé")

            # Pour trouver le premier onglet du TabWidget
            first_tab = tab_widget.widget(0)
            

            confirmButton = self.findChild(QtWidgets.QPushButton, 'confirmButton')
            coverageButton = self.findChild(QtWidgets.QPushButton, 'coverageButton')

            if confirmButton :

                print("Bouton 'Valider' trouvé")

                confirmButton.clicked.connect(self.on_valider_clicked)

            if coverageButton :

                print("Bouton 'Saisir emprise' trouvé")
                coverageButton.clicked.connect(self.on_saisir_emprise_clicked)

    def handle_extent_selected(self):
        
        #étendue
        self.extent = self.mapTool.extent()

        # Définir le système de référence source (le CRS actuel de la carte)
        source_crs = self.iface.mapCanvas().mapSettings().destinationCrs()

        # Définir le système de référence cible (WGS84)
        target_crs = QgsCoordinateReferenceSystem('EPSG:4326')  # EPSG:4326 est le code EPSG pour WGS84

        # Créer l'objet de transformation des coordonnées
        transform = QgsCoordinateTransform(source_crs, target_crs, QgsProject.instance())

        # Appliquer la transformation aux coins de l'emprise
        self.extent_wgs84 = transform.transformBoundingBox(self.extent, QgsCoordinateTransform.ForwardTransform)
        extent_wgs84_str = 'xmin: {:.2f}, ymin: {:.2f}, xmax: {:.2f}, ymax: {:.2f}'.format(
            round(self.extent_wgs84.xMinimum(), 2),
            round(self.extent_wgs84.yMinimum(), 2),
            round(self.extent_wgs84.xMaximum(), 2),
            round(self.extent_wgs84.yMaximum(), 2)
        )

        print(self.extent)
        print(self.extent_wgs84)
        print("Emprise sélectionnée (WGS84):", extent_wgs84_str)
        self.empriseLabel.setText(f'Emprise définie : {extent_wgs84_str}')

        self.mapTool.clearRubberBand()

        self.mapCanvas.setLayers(self.iface.mapCanvas().layers())
        self.mapCanvas.setExtent(self.extent)
        self.mapCanvas.setCanvasColor(Qt.white)
        self.mapCanvas.enableAntiAliasing(True)
        if self.rubberband is not None:
            self.mapCanvas.scene().removeItem(self.rubberband)
        self.rubberband = QgsRubberBand(self.mapCanvas, QgsWkbTypes.PolygonGeometry)  # polygon
        self.rubberband.setToGeometry(QgsGeometry.fromRect(self.extent), None)
        self.mapCanvas.refreshAllLayers()
        self.mapCanvas.show()

        self.showNormal()

        self.raise_()
        self.activateWindow()

    def on_valider_clicked(self):

        self.iface.mapCanvas().unsetMapTool(self.mapTool)
        
        if self.surveyDate:
            # On récupère la valeur de la date saisie
            self.date_value = self.surveyDate.date().toString("yyyy-MM-dd")
            print(self.date_value)
        else:
            print("Objet QDateEdit non trouvé.")

        if self.extent_wgs84 is not None :

            print("coucou")
            
            rect = self.extent_wgs84
            xmin, ymin, xmax, ymax = rect.xMinimum(), rect.yMinimum(), rect.xMaximum(), rect.yMaximum()

            print("xmin",xmin)

        else :

            print('non')
        
        self.tabWidget.setCurrentIndex(1)

    def on_saisir_emprise_clicked(self):
        
        #cache la fenetre du plugin
        self.showMinimized()



        canvas = self.iface.mapCanvas()
        self.mapTool = QgsMapToolExtent(canvas)
        self.mapTool.extentChanged.connect(self.handle_extent_selected)
        canvas.setMapTool(self.mapTool)


    

