# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AeroDataVisualizerDialog
                                 A QGIS plugin
 This plugin allows to visualize aeronautical data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-01-08
        git sha              : $Format:%H$
        copyright            : (C) 2024 by BEA
        email                : louise.redlinger@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# Librairie saisie d'emprise (TRI A FAIRE!)
from qgis.core import QgsRectangle
from qgis.gui import  QgsMapTool
from qgis.core import QgsPointXY
from qgis.PyQt.QtWidgets import QApplication, QMessageBox

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'aero_data_visualizer_dialog_base.ui'))





class SaisirEmpriseMapTool(QgsMapTool):
    def __init__(self, canvas):
        super(SaisirEmpriseMapTool, self).__init__(canvas)
        self.canvas = canvas
        self.emprise_defined = False
        self.emprise = QgsRectangle()

    def canvasPressEvent(self, event):
        x = event.pos().x()
        y = event.pos().y()
        point = self.canvas.getCoordinateTransform().toMapCoordinates(x, y)
        
        if not self.emprise_defined:
            self.emprise.set(QgsPointXY(point), QgsPointXY(point))
        else:
            self.emprise_defined = False
            self.emprise = QgsRectangle()

    def canvasMoveEvent(self, event):
        if not self.emprise_defined:
            x = event.pos().x()
            y = event.pos().y()
            point = self.canvas.getCoordinateTransform().toMapCoordinates(x, y)
            self.emprise.set(QgsPointXY(self.emprise.xMinimum(), self.emprise.yMinimum()), QgsPointXY(point))

    def canvasReleaseEvent(self, event):
        if not self.emprise_defined:
            self.emprise_defined = True

    def is_emprise_defined(self):
        return self.emprise_defined

    def get_emprise(self):
        return self.emprise


class AeroDataVisualizerDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(AeroDataVisualizerDialog, self).__init__(parent)
        self.iface = iface
        self.setupUi(self)


        print("Bienvenue dans le bien nommé plugin AeroDataVisualizer ! ")

        # Pour trouver le QTabWidget 
        tab_widget = self.findChild(QtWidgets.QTabWidget, 'tabWidget')

        if tab_widget:
            
            print("TabWidget trouvé")

            # Pour trouver le premier onglet du TabWidget
            first_tab = tab_widget.widget(0)
            

            confirmButton = self.findChild(QtWidgets.QPushButton, 'confirmButton')
            coverageButton = self.findChild(QtWidgets.QPushButton, 'coverageButton')

            if confirmButton :

                print("Bouton 'Valider' trouvé")

                confirmButton.clicked.connect(self.on_valider_clicked)

            if coverageButton :

                print("Bouton 'Saisir emprise' trouvé")
                coverageButton.clicked.connect(self.on_saisir_emprise_clicked)

            
    def on_valider_clicked(self):
        
        print('clic valider')

        # On cherche l'objet QDateEdit
        surveyDate = self.findChild(QtWidgets.QDateEdit, 'surveyDate')

        if surveyDate:
            # On récupère la valeur de la date saisie
            date_value = surveyDate.date().toString("yyyy-MM-dd")
            print("Date saisie :", date_value)
        else:
            print("Objet QDateEdit non trouvé.")
        
        tab_widget = self.findChild(QtWidgets.QTabWidget, 'tabWidget')
        tab_widget.setCurrentIndex(1)

    def on_saisir_emprise_clicked(self):

        print('clic saisir emprise')

        # On crée et on active l'outil de carte personnalisé map_tool
        map_tool = SaisirEmpriseMapTool(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(map_tool)

        # Tant que l'utilisateur n'a pas saisi l'emprise, l'activité en cours continue
        while not map_tool.is_emprise_defined():
            QApplication.processEvents()

        # On récupère l'emprise définie par l'utilisateur
        emprise = map_tool.get_emprise()
        print(f'Emprise définie: {emprise.toString()}')

        empriseLabel = self.findChild(QtWidgets.QLabel, 'empriseLabel')

        if empriseLabel :

            print('empriseLabel trouvé')
            empriseLabel.setText(f'Emprise définie : {emprise.toString()}')

        else :

            print('pas trouvé')
    

